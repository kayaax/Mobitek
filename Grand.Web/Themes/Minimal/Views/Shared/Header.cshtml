@using Grand.Framework.Themes
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject IPageHeadBuilder pagebuilder
@{ 
    var supportRtl = workContext.WorkingLanguage.Rtl;
    var themeName = themeContext.WorkingThemeName;
    if (supportRtl)
    {
        pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/header/header.rtl.css", themeName));
    }
    else
    {
        pagebuilder.AppendCssFileParts(ResourceLocation.Head, string.Format("~/Themes/{0}/Content/css/header/header.css", themeName));
    }
}
<div id="header-nav" class="header-nav animate__animated" v-bind:class="{ noHome: noHome }">
    <b-navbar type="light">
        <b-container :fluid="fluid" id="header-container">
                <div class="d-inline-flex d-lg-none">
                    <b-button aria-label="menu-toggler" class="menu-toggler" v-b-toggle.sidebar-menu><span></span><span></span><span></span></b-button>
                    <b-sidebar id="sidebar-menu"
                               backdrop
                               shadow @if (supportRtl) { <text> right</text> } else { <text>left</text> }>
                    </b-sidebar>
                </div>
            @await Component.InvokeAsync("Logo")
            <partial name="TopMenu" />
            <b-navbar-nav class="top-header-items order-3">
                <b-nav-item class="d-lg-block d-none">
                    <span class="icon-frame icons" @@click="fluid = !fluid"></span>
                </b-nav-item>
                <b-nav-item>
                    <span class="icon-magnifier icons" v-b-modal.search-box></span>
                </b-nav-item>
                <b-modal id="search-box"
                         hide-footer hide-header size="xl">
                    @await Component.InvokeAsync("SearchBox")
                </b-modal>
                <b-nav-item>
                    <span class="icon-user icons" v-b-toggle.sidebar-right></span>
                </b-nav-item>
                <b-sidebar id="sidebar-right" bg-variant="white" body-class="user-panel" title="@T("Account.MyAccount")" @if (supportRtl) { <text> left</text> } else { <text>right</text> } backdrop>
                    <div class="d-inline-flex flex-wrap mb-2">
                        @await Component.InvokeAsync("TaxTypeSelector")
                        @await Component.InvokeAsync("CurrencySelector")
                        @await Component.InvokeAsync("LanguageSelector")
                        @await Component.InvokeAsync("StoreSelector")
                        @await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" })
                    </div>
                    @await Component.InvokeAsync("HeaderLinks")
                </b-sidebar>
                @await Component.InvokeAsync("ShoppingCartLinks")
            </b-navbar-nav>
        </b-container>
    </b-navbar>
</div>