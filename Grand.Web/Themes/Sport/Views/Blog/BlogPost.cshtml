@model BlogPostModel
@using Grand.Web.Models.Blogs;
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_ColumnsTwoOther";

    //title
    pagebuilder.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    pagebuilder.AddMetaDescriptionParts(Model.MetaDescription);
    pagebuilder.AddMetaKeywordParts(Model.MetaKeywords);
}
@section left {
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_before" })
    @await Component.InvokeAsync("BlogCategories")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before_blog_archive" })
    @await Component.InvokeAsync("BlogMonths")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_blog_archive" })
    @await Component.InvokeAsync("BlogTags")
    @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_blog_after" })
}
<div class="page blogpost-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_top", additionalData = Model.Id })
    <a class="js-offcanvas-trigger filter-button mw-100 mb-3" data-offcanvas-trigger="LeftSideCatalog" href="#LeftSideCatalog">
        <span class="filter-menu-item">
            <span class="medium-line filter-line"></span>
            <span class="short-line filter-line"></span>
            <span class="long-line filter-line"></span>
        </span>
        <span class="filter-name">@T("Blog") @T("catalog.selectors.fiters")</span>
    </a>
    <div class="card news-card border-0">
        <div class="card-header border-bottom-0 p-0">
            @if (!string.IsNullOrEmpty(Model.PictureModel.ImageUrl))
            {
                <div class="img-container">
                    <img class="img-fluid lazyload rounded-0" alt="@Model.PictureModel.AlternateText" data-src="@Model.PictureModel.ImageUrl" title="@Model.PictureModel.Title">
                </div>
            }
            <span class="news-date"><span class="lnr linearicons-calendar-text mr-2"></span>@Model.CreatedOn.ToString("D")</span>
            <h4 class="h5 news-title">@Model.Title</h4>
        </div>
        <div class="card-body px-0 pt-0">
            @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_body", additionalData = Model.Id })
            <div class="post-body">
                @Html.Raw(Model.Body)
            </div>
        </div>
    </div>

    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_products", additionalData = Model.Id })

    @await Component.InvokeAsync("BlogPostProducts", new { blogPostId = Model.Id })

    @if (Model.Tags.Any())
    {
        <div class="tags generalMarginSupporter">
            <label class="col-form-label w-100">@T("Blog.Tags"):</label>
            @for (int i = 0; i < Model.Tags.Count; i++)
            {
                var tag = Model.Tags[i];
                <a class="btn btn-outline-secondary" href="@Url.RouteUrl("BlogByTag", new {tag = tag})">@tag</a>
            }
        </div>
    }

    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_before_comments", additionalData = Model.Id })
    @if (Model.AllowComments)
    {
        <div class="fieldset new-comment generalMarginSupporter" id="comments">
            <h4 class="generalTitle generalMarginSupporter">@T("Blog.Comments.LeaveYourComment")</h4>
            <div class="notifications">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                @{
                    var result = TempData["Grand.blog.addcomment.result"] as string;
                }
                @if (!String.IsNullOrEmpty(result))
                {
                    <div class="result card bg-info p-3 text-white">@result</div>
                }
            </div>
            <form asp-route="BlogPost" asp-route-sename="@Model.SeName" method="post">
                <div class="form-fields">
                    <div class="form-group">
                        <label asp-for="AddNewComment.CommentText" class="col-form-label">@T("Blog.Comments.CommentText"):</label>
                        <textarea asp-for="AddNewComment.CommentText" class="enter-comment-text form-control"></textarea>
                        <span asp-validation-for="AddNewComment.CommentText"></span>
                    </div>
                    @if (Model.AddNewComment.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                            <captcha />
                        </div>
                    }
                </div>
                <div class="buttons text-xs-center text-md-left generalMarginSupporter">
                    <input type="submit" name="add-comment" class="btn btn-info blog-post-add-comment-button" value="@T("Blog.Comments.SubmitButton")" />
                </div>
            </form>
        </div>
        if (Model.Comments.Any())
        {
            <div class="comment-list">
                <h4 class="generalTitle generalMarginSupporter"><strong>@T("Blog.Comments")</strong></h4>
                <div class="comments">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="card comment blog-comment text-center text-sm-left">
                                <h5 class="username card-header">@(comment.CustomerName)</h5>
                            <div class="card-body row">
                                <div class="col-12 col-sm-9 comment-content">
                                    <div class="comment-time">
                                        <label>@T("Blog.Comments.CreatedOn"):</label>
                                        <span class="stat-value">@comment.CreatedOn.ToString("g")</span>
                                    </div>
                                    <div class="comment-body text-center text-sm-left">
                                        @comment.CommentText
                                    </div>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_inside_comment", additionalData = comment.Id })
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_after_comments", additionalData = Model.Id })
    @await Component.InvokeAsync("Widget", new { widgetZone = "blogpost_page_bottom", additionalData = Model.Id })
</div>