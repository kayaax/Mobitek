@model CustomerOrderListModel
@inject IPageHeadBuilder pagebuilder
@{
    Layout = "_ColumnsTwo";

    //title
    pagebuilder.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @await Component.InvokeAsync("CustomerNavigation", new { selectedTabId = CustomerNavigationEnum.Orders })
}
<div class="page account-page order-list-page pl-lg-3 pt-lg-0 pt-3">
    <a class="js-offcanvas-trigger filter-button d-lg-none d-flex mw-100 mb-3" data-offcanvas-trigger="LeftSideCatalog" href="#LeftSideCatalog">
        <span class="filter-menu-item">
            <span class="medium-line filter-line"></span>
            <span class="short-line filter-line"></span>
            <span class="long-line filter-line"></span>
        </span>
        <span class="filter-name">@T("Account.Navigation")</span>
    </a>
    <h2 class="generalTitle page-title">@T("Account.CustomerOrders")</h2>
    @if (Model.RecurringOrders.Any())
    {
        <div class="recurring-payments">
            <h5>
                <strong>
                    @T("Account.CustomerOrders.RecurringOrders")
                </strong>
            </h5>
            <form asp-route="CustomerOrders" method="post">
                <div class="table-responsive">
                    <table class="table teble-hover data-table">
                        <colgroup>
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                        </colgroup>
                        <thead>
                            <tr>
                                <th class="start-date">
                                    @T("Account.CustomerOrders.RecurringOrders.StartDate")
                                </th>
                                <th class="cycle-info">
                                    @T("Account.CustomerOrders.RecurringOrders.CycleInfo")
                                </th>
                                <th class="next-payment">
                                    @T("Account.CustomerOrders.RecurringOrders.NextPayment")
                                </th>
                                <th class="total-cycles">
                                    @T("Account.CustomerOrders.RecurringOrders.TotalCycles")
                                </th>
                                <th class="cycles-remaining">
                                    @T("Account.CustomerOrders.RecurringOrders.CyclesRemaining")
                                </th>
                                <th class="initial-order">
                                    @T("Account.CustomerOrders.RecurringOrders.InitialOrder")
                                </th>
                                <th class="cancel">
                                    @T("Account.CustomerOrders.RecurringOrders.Cancel")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.RecurringOrders)
                            {
                                <tr>
                                    <td class="start-date">
                                        @item.StartDate
                                    </td>
                                    <td class="cycle-info">
                                        @item.CycleInfo
                                    </td>
                                    <td class="next-payment">
                                        @item.NextPayment
                                    </td>
                                    <td class="total-cycles">
                                        @item.TotalCycles
                                    </td>
                                    <td class="cycles-remaining">
                                        @item.CyclesRemaining
                                    </td>
                                    <td class="initial-order">
                                        <a href="@Url.RouteUrl("OrderDetails", new { orderId = item.InitialOrderId })">@string.Format(T("Account.CustomerOrders.RecurringOrders.ViewInitialOrder").Text, item.InitialOrderId)</a>
                                    </td>
                                    <td class="cancel">
                                        @if (item.CanCancel)
                                        {
                                            <input type="submit" name="cancelRecurringPayment@(item.Id)" value="@T("Account.CustomerOrders.RecurringOrders.Cancel")" class="btn btn-outline-success cancel-recurring-order-button" />
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </form>
        </div>
        if (Model.CancelRecurringPaymentErrors.Any())
        {
            <div class="message-error">
                <ul>
                    @foreach (var error in Model.CancelRecurringPaymentErrors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }
    }

    @if (Model.Orders.Any())
    {
        <div class="account-order">
            <div class="form-row">
                @foreach (var order in Model.Orders)
                {
                    <div class="col-xl-3 col-lg-4 col-md-4 col-sm-6 col-12 mb-3">
                        <div class="card">
                            <h6 class="card-header text-uppercase">
                                <strong>
                                    <span>
                                        @T("Account.CustomerOrders.OrderNumber"):
                                    </span>
                                    <span>
                                        @order.OrderNumber
                                    </span>
                                </strong>
                            </h6>
                            <div class="card-body small">
                                <ul class="info mb-0">
                                    <li><span class="col-form-label">@T("Account.CustomerOrders.OrderStatus"):</span> <span class="order-status @order.OrderStatusEnum.ToString().ToLowerInvariant()">@order.OrderStatus</span></li>
                                    <li><span class="order-date"><span class="col-form-label">@T("Account.CustomerOrders.OrderDate"):</span> <span>@order.CreatedOn.ToString()</span></span></li>
                                    <li><span class="col-form-label">@T("Account.CustomerOrders.OrderTotal"):</span> <span class="order-total">@order.OrderTotal</span></li>
                                </ul>
                            </div>
                            <div class="common-buttons justify-content-start">
                                <button type="button" class="btn btn-sm btn-info order-details-button" onclick="setLocation('@Url.RouteUrl("OrderDetails", new { orderId = order.Id })')">@T("Account.CustomerOrders.OrderDetails")</button>

                                @if (order.IsReturnRequestAllowed)
                                {
                                    <button type="button" class="btn btn-sm btn-warning text-white return-items-button" onclick="setLocation('@Url.RouteUrl("ReturnRequest", new { orderId = order.Id })')">
                                        @T("Account.CustomerOrders.ReturnItems")
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="no-data">
            @T("Account.CustomerOrders.NoOrders")
        </div>
    }
</div>