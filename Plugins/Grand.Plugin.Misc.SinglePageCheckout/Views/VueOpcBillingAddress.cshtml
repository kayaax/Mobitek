<div class="checkout-data">
        @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_top" })
            <template v-if="vmorder.BillingShipToSameAddressAllowed">
                <div class="ship-to-same-address">
                     <p class="selector">
                         <label class="custom-control custom-checkbox">
                             <input type="checkbox" checked="checked" id="ShipToSameAddress" name="ShipToSameAddress" value="true" class="custom-control-input" onclick="Billing.shiptoSameAddress();" />
                             <span class="custom-control-label"></span>
                             <span class="custom-control-description">@T("Checkout.ShipToSameAddress")</span>
                         </label>
                     </p>
                </div>
            </template>

            <template v-if="vmorder.BillingExistingAddresses">
                <div class="select-billing-address">
                    <div class="col-12 px-0">
                        <label class="genera" for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
                    </div>
                    <div class="col-12 px-0">
                        <div>
                            <select name="billing_address_id" id="billing-address-select" class="custom-select address-select" title="" onchange="Billing.newAddress(!this.value)">
                                <template v-for="address in vmorder.BillingExistingAddresses">
                                    <option :value="address.Id">
                                        {{address.FirstName}}
                                        {{address.LastName}}
                                        <template v-if="address.StreetAddressEnabled && address.Address1 !== null">
                                            , {{address.Address1}}
                                        </template>
                                        <template v-if="address.CityEnabled && address.City !== null">
                                            , {{address.City}}
                                        </template>
                                        <template v-if="address.StateProvinceEnabled && address.StateProvinceName !== null">
                                            , {{address.StateProvinceName}}
                                        </template>
                                        <template v-if="address.ZipPostalCodeEnabled && address.ZipPostalCode !== null">
                                            , {{address.ZipPostalCode}}
                                        </template>
                                        <template v-if="address.CountryEnabled && address.CountryName !== null">
                                            , {{address.CountryName}}
                                        </template>
                                    </option>
                                </template>
                                <option value="" :selected="vmorder.BillingNewAddressPreselected">@T("Checkout.NewAddress")</option>
                            </select>
                        </div>
                    </div>
                </div>
            </template>
        @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_middle" })
        <div class="new-billing-address" id="billing-new-address-form" style="display:none;">
            <div class="enter-address">
                @{
                    var dataDictAddress = new ViewDataDictionary(ViewData);
                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                    <partial name="_CreateOrUpdateAddress" model="Model.BillingAddress.NewAddress" view-data="dataDictAddress" />
                }
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
            </div>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_bottom" })  
</div>